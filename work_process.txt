
** COMPONENTES PPALES MINISHELL

1. BUCLE PPAL 	...................process..
2. INPUT READER	...................process..
3. PARSING COMANDOS ...............process..
	üîπ HITO 1: Lectura b√°sica y tokenizaci√≥n
		- [‚úì] Leer la l√≠nea de entrada con readline().
		- [‚úì] Dividir la l√≠nea en tokens, respetando espacios dentro de comillas.
		- [‚úì] Reconocer operadores especiales: |, >, <, >>, <<.
2		- [‚úì] Ignorar espacios en blanco fuera de comillas.

	üîπ HITO 2: Manejo de comillas
		- [‚úì] Soportar comillas simples '...' (contenido literal).
		- [‚úì] Soportar comillas dobles "..." (expande variables).
		- [‚úì] Detectar comillas sin cerrar y dar error adecuado.
		- [‚úì ] Manejar comillas anidadas o mezcladas correctamente (ej. "Hola '$USER'").

	üîπ HITO 3: Expansi√≥n de variables de entorno
		- [ ] Detectar $VAR y reemplazar por su valor.
		- [ ] Manejar $? (√∫ltimo c√≥digo de salida).
		- [ ] Soportar $VAR dentro de comillas dobles.
		- [ ] Ignorar expansi√≥n dentro de comillas simples.

	üîπ HITO 4: Reconocimiento de redirecciones
		- [‚úì] Detectar > (redirecci√≥n de salida).
		- [‚úì] Detectar >> (redirecci√≥n de salida en modo append).
		- [‚úì] Detectar < (redirecci√≥n de entrada).
		- [‚úì] Detectar << (heredoc).
		- [ ] Asociar redirecciones al comando correspondiente.
		- [ ] Validar que cada redirecci√≥n tenga un archivo objetivo (error si no).

	üîπ HITO 5: Reconocimiento de pipes
		- [ ] Dividir la l√≠nea en comandos conectados por |.
		- [ ] Validar sintaxis: error si hay pipe sin comando antes o despu√©s.
		- [ ] Crear estructuras tipo lista o √°rbol para representar la secuencia.

	üîπ HITO 6: Construcci√≥n de estructuras de comandos
		- [ ] Crear una estructura t_command o similar que incluya:
			- Nombre del comando.
			- Lista de argumentos.
			- Redirecciones de entrada/salida.
			- Indicadores de heredoc, append, etc.
		- [ ] Crear una lista enlazada o array de estas estructuras si hay pipes.
		- [ ] Asignar correctamente las redirecciones a cada nodo.

	üîπ HITO 7: Manejo de errores de sintaxis
		- [ ] Detectar errores como:
			- | ls (pipe al principio)
			- ls || cat (pipes m√∫ltiples inv√°lidos)
			- echo > (falta archivo)
			- Comillas no cerradas.
		- [ ] Mostrar mensajes claros sin que la shell crashee.

	üîπ HITO 8: Heredoc b√°sico
		- [ ] Detectar << delimitador
		- [ ] Leer m√∫ltiples l√≠neas hasta encontrar el delimitador.
		- [ ] Guardar el contenido en un pipe temporal o archivo tmp.
		- [ ] Soportar expansi√≥n de variables dentro del heredoc si NO est√° entre comillas.

	üîπ HITO 9: Soporte de caracteres de escape (opcional)
		- [ ] Permitir \ para escapar comillas, $, espacios, etc.
		- [ ] Manejar correctamente escapes dentro de comillas dobles.

	üîπ HITO 10: Testing con casos l√≠mite
		- [ ] Pruebas con comandos complejos, por ejemplo:
			echo "Hola $USER" | grep "$HOME" >> salida.txt
		- [ ] Pruebas con errores de sintaxis intencionales.
		- [ ] Pruebas con comillas anidadas, pipes m√∫ltiples, y combinaciones.

4. COMMAND EXECUTOR ...................0 %..
	- Manejo de se√±ales
5. ENVIROMENT MANAGER .................0 %..

